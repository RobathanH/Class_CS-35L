Name: Robathan Harries
UID: 904836501
Assignment 5: sfrob.txt


Create input file:
C Program (nlines.c):

#include <stdio.h>
#include <time.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
  if (argc != 2) exit(0);

  int lines = atoi(argv[1]);

  srand(time(NULL));
  int i;
  for (i = 0; i < lines; i++) {
    int charNum = rand() % 20 + 1;
    int j;
    for (j = 0; j < charNum; j++) {
      int r = rand() % 95 + 32;//32 to 126 are normal, recognizable chars                
      putchar(r);
    }
    putchar('\n');
  }
}



Comparisons as a function of lines for sfrobu:

---100 lines/words:
$ ./nlines 100 >input.txt
$ time ./sfrobu <input.txt >output.txt
real	0m0.016s
user	0m0.005s
sys	0m0.011s

---1000 lines/words:
$ ./nlines 1000 >input.txt
$ time ./sfrobu <input.txt >output.txt
real	0m0.068s
user	0m0.016s
sys	0m0.050s

---10000 lines/words:
$ ./nlines 10000 >input.txt
$ time ./sfrobu <input.txt >output.txt
real	0m0.230s
user	0m0.049s
sys	0m0.178s

---100000 lines/words:
$ ./nlines 100000 >input.txt
$ time ./sfrobu <input.txt >output.txt
real	0m2.139s
user	0m0.296s
sys	0m1.841s

---1000000 lines/words:
$ ./nlines 1000000 >input.txt
$ time ./sfrobu <input.txt >output.txt
real	0m20.766s
user	0m3.221s
sys	0m17.542s

The number of comparisons is directly proportional to the user time.
Lines		Time
100		0.005
1000		0.016
10000		0.049
100000		0.296
1000000		3.221

Since the rate of increase is itself increasing, it seems that the number 
of comparisons is greater than O(n), but it is not increasing fast enough 
to be O(n^2). Instead, as it implements qsort, the number of comparisons is 
probably O(n log n).


Time Comparisons between functions:

$ ./nlines 10000 >input.txt

---sfrob:
$ time ./sfrob <input.txt >output.txt
real	0m0.045s
user	0m0.036s
sys	0m0.009s

---sfrobu:
$ time ./sfrobu <input.txt >output.txt
real	0m0.242s
user	0m0.037s
sys	0m0.202s

---sfrobs:
$ time ./sfrobs <input.txt >output.txt
real	0m0.077s
user	0m0.073s
sys	0m0.011s

---sfrobu -f:
$ time ./sfrobu -f <input.txt >output.txt
real	0m0.285s
user	0m0.044s
sys	0m0.240s

---sfrobs -f:
$ time ./sfrobs -f <input.txt >output.txt
real	0m0.065s
user	0m0.063s
sys	0m0.019s

We find that sfrob is faster than both other options, with very little 
system time, since it uses far fewer system calls. sfrobu is the slowest 
option, with far more system time, as it is unbuffered and thus has far 
more system calls.

